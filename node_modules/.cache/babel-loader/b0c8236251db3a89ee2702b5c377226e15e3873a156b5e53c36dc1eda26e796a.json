{"ast":null,"code":"var _jsxFileName = \"/home/anonymous/Desktop/UIA/hackathon_TeamSKY-main/src/global/LocationPickerExperimental/mapContext.tsx\";\n/*global google*/\n\nimport React from \"react\";\nimport { ReGoMapContext } from \"./context\";\nimport { initMap } from \"./mapInitiatior\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MapContextProvider extends React.Component {\n  constructor(props) {\n    var _this$props$map, _this$props$startLoca;\n    super(props);\n\n    //havent got the right boundries of sl and dont think if this is ne cessory\n    this.infoWindow = null;\n    this.defaultMapOptions = void 0;\n    this.SierraLeoneBound = void 0;\n    this.mapEventListener = null;\n    this.restrictionBound = void 0;\n    this.timeout = null;\n    this.getDeviceLocation = () => {\n      navigator.geolocation.getCurrentPosition(options => this.getCurrentPosition(options));\n    };\n    this.getCurrentPosition = position => {\n      const lat = position.coords.latitude;\n      const lng = position.coords.longitude;\n      this.setMarkers({\n        lat,\n        lng\n      });\n      this.setState(prev => ({\n        ...prev,\n        startLocation: {\n          lat,\n          lng\n        }\n      }));\n    };\n    this.loadMap = async () => {\n      // this.defaultMapOptions\n      await initMap(this.props.APIkey, this.state.mapDiv, this.defaultMapOptions).then(map => {\n        try {\n          this.infoWindow = new google.maps.InfoWindow();\n          this.setState(prev => ({\n            ...prev,\n            map\n          }));\n        } catch (e) {\n          console.log(\"%c\" + e, \"coloe:red\");\n        }\n      });\n    };\n    this.updateMarker = (position, title, map) => {\n      let markers = this.state.markers;\n      if (markers.length > 1) {\n        this.setMapOnAll(null);\n        markers.pop();\n        this.setState(prev => ({\n          ...prev,\n          markers\n        }));\n      }\n      var marker = new google.maps.Marker({\n        position: position,\n        title: title ? title : \"programs Location\"\n      });\n      markers.push(marker);\n      this.setMapOnAll(map);\n      return marker;\n    };\n    this.setMapOnAll = map => {\n      let markers = this.state.markers;\n      for (let i = 0; i < markers.length; i++) {\n        markers[i].setMap(map);\n      }\n      this.setState(prev => ({\n        ...prev,\n        markers\n      }));\n    };\n    this.hideMarkers = () => {\n      this.setMapOnAll(null);\n    };\n    this.mapEventCallback = (latLng, map, getSelectedPace, undo) => {\n      if (latLng) {\n        // var marker = this.updateMarker(latLng as LatLng, \"Programs location\", map);\n\n        if (this.infoWindow !== null) {\n          this.infoWindow.close();\n        }\n        this.infoWindow = new google.maps.InfoWindow();\n        this.infoWindow.setContent(\"❌\");\n        this.infoWindow.open({\n          // anchor: marker,\n          map,\n          shouldFocus: false\n        });\n\n        // undo\n        getSelectedPace(latLng.lat(), latLng.lng(), \"\");\n      }\n    };\n    this.geoLocateToAPoint = (lat, lng) => {\n      this.setMarkers({\n        lat,\n        lng\n      });\n    };\n    this.setMarkers = _ref => {\n      let {\n        lat,\n        lng\n      } = _ref;\n      const map = this.state.map;\n      if (map) {\n        var myLatlng = new google.maps.LatLng({\n          lat: lat,\n          lng: lng\n        });\n        this.updateMarker(myLatlng, \"My location\", map);\n        map.setCenter(myLatlng);\n        console.log(map);\n      }\n    };\n    this.setPredictions = placePredictions => {\n      this.setState(prev => ({\n        ...prev,\n        placePredictions\n      }));\n    };\n    this.debounce = (func, wait) => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n      this.timeout = setTimeout(func, wait);\n    };\n    this.displaySuggestions = (predictions, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK || !predictions) {\n        return;\n      }\n      this.setPredictions(predictions);\n    };\n    this.SierraLeoneBound = {\n      north: 23.0824,\n      south: 47.1987,\n      west: 45.25,\n      east: 45.25\n    };\n    this.restrictionBound = {\n      latLngBounds: this.SierraLeoneBound,\n      strictBounds: true\n    };\n    // 8.4770816 -13.2481024\n    // ??\n    this.defaultMapOptions = {\n      center: {\n        lat: 8.4553522,\n        lng: -13.2943229\n      },\n      //obj\n      zoom: 13,\n      //int\n      mapTypeControl: false,\n      //bool\n      streetViewControl: false,\n      //bool\n      // restriction: this.restrictionBound,\n      ...this.props.mapOption\n    };\n    this.state = {\n      selectedPalce: {\n        name: null,\n        location: null\n      },\n      placePredictions: [],\n      markers: [],\n      autoCompleteServices: null,\n      map: (_this$props$map = this.props.map) !== null && _this$props$map !== void 0 ? _this$props$map : null,\n      selectedLocation: null,\n      // on map location press\n      startLocation: (_this$props$startLoca = this.props.startLocation) !== null && _this$props$startLoca !== void 0 ? _this$props$startLoca : null,\n      mapDiv: document.createElement(\"div\")\n    };\n  }\n  componentDidMount() {\n    this.loadMap();\n  }\n  componentWillUnmount() {\n    // this.mapEventListener?.remove();\n  }\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return this.state.map !== nextState.map;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(ReGoMapContext.Provider, {\n      value: {\n        state: this.state,\n        infoWindow: this.infoWindow,\n        geoLocateToAPoint: this.geoLocateToAPoint,\n        // geoLocateOnAutoCompletePlaceClicked: this.geoLocateOnAutoCompletePlaceClicked.bind(this),\n        getDeviceLocation: this.getDeviceLocation.bind(this),\n        mapEventCallback: this.mapEventCallback\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  }\n}\nlet MapContextConsumer = ReGoMapContext.Consumer;\nexport { MapContextConsumer, MapContextProvider };","map":{"version":3,"names":["React","ReGoMapContext","initMap","jsxDEV","_jsxDEV","MapContextProvider","Component","constructor","props","_this$props$map","_this$props$startLoca","infoWindow","defaultMapOptions","SierraLeoneBound","mapEventListener","restrictionBound","timeout","getDeviceLocation","navigator","geolocation","getCurrentPosition","options","position","lat","coords","latitude","lng","longitude","setMarkers","setState","prev","startLocation","loadMap","APIkey","state","mapDiv","then","map","google","maps","InfoWindow","e","console","log","updateMarker","title","markers","length","setMapOnAll","pop","marker","Marker","push","i","setMap","hideMarkers","mapEventCallback","latLng","getSelectedPace","undo","close","setContent","open","shouldFocus","geoLocateToAPoint","_ref","myLatlng","LatLng","setCenter","setPredictions","placePredictions","debounce","func","wait","clearTimeout","setTimeout","displaySuggestions","predictions","status","places","PlacesServiceStatus","OK","north","south","west","east","latLngBounds","strictBounds","center","zoom","mapTypeControl","streetViewControl","mapOption","selectedPalce","name","location","autoCompleteServices","selectedLocation","document","createElement","componentDidMount","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","nextContext","render","Provider","value","bind","children","fileName","_jsxFileName","lineNumber","columnNumber","MapContextConsumer","Consumer"],"sources":["/home/anonymous/Desktop/UIA/hackathon_TeamSKY-main/src/global/LocationPickerExperimental/mapContext.tsx"],"sourcesContent":["\r\n/*global google*/\r\n\r\nimport React from \"react\";\r\nimport { PlaceServiceStatus } from \"../LocationPicker/mapType\";\r\nimport { ReGoMapContext } from \"./context\";\r\nimport { initMap } from \"./mapInitiatior\";\r\nimport { AutoCompletePredictions, GoogleMap, LatLng, Marker, Position, ReGoMapContextStateType, ReGoMapPropTypes } from \"./mapType\";\r\n\r\n\r\ntype propType = ReGoMapPropTypes;\r\n\r\ntype slBound = {\r\n    north: number\r\n    south: number\r\n    west: number\r\n    east: number\r\n}\r\n\r\nclass MapContextProvider extends React.Component<propType, ReGoMapContextStateType>{\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n\r\n        //havent got the right boundries of sl and dont think if this is ne cessory\r\n        this.SierraLeoneBound = {\r\n            north: 23.0824,\r\n            south: 47.1987,\r\n            west: 45.25,\r\n            east: 45.25,\r\n        };\r\n\r\n        this.restrictionBound = {\r\n            latLngBounds: this.SierraLeoneBound,\r\n            strictBounds: true,\r\n        };\r\n        // 8.4770816 -13.2481024\r\n        // ??\r\n        this.defaultMapOptions = {\r\n            center: { lat: 8.4553522, lng: -13.2943229 },//obj\r\n            zoom: 13,//int\r\n            mapTypeControl: false,//bool\r\n            streetViewControl: false,//bool\r\n            // restriction: this.restrictionBound,\r\n            ...this.props.mapOption,\r\n        }\r\n        this.state = {\r\n            selectedPalce: { name: null, location: null },\r\n            placePredictions: [],\r\n            markers: [],\r\n            autoCompleteServices: null,\r\n            map: this.props.map ?? null,\r\n            selectedLocation: null,// on map location press\r\n            startLocation: this.props.startLocation ?? null,\r\n            mapDiv: document.createElement(\"div\"),\r\n        }\r\n    }\r\n\r\n\r\n    infoWindow: google.maps.InfoWindow | null = null;\r\n    defaultMapOptions: google.maps.MapOptions\r\n    SierraLeoneBound: slBound\r\n    mapEventListener: google.maps.MapsEventListener | null = null\r\n\r\n    restrictionBound: {\r\n        latLngBounds: slBound\r\n        strictBounds: boolean\r\n    }\r\n\r\n    timeout: NodeJS.Timeout | null = null;\r\n    getDeviceLocation = () => {\r\n        navigator.geolocation.getCurrentPosition((options) => this.getCurrentPosition(options))\r\n    }\r\n\r\n    getCurrentPosition = (position: Position) => {\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n        this.setMarkers({ lat, lng });\r\n        this.setState(prev => ({ ...prev, startLocation: { lat, lng } }))\r\n    }\r\n\r\n\r\n\r\n\r\n    loadMap = async () => {\r\n        // this.defaultMapOptions\r\n        await initMap(this.props.APIkey, this.state.mapDiv,\r\n            this.defaultMapOptions\r\n        ).then((map) => {\r\n\r\n            try {\r\n                this.infoWindow = new google.maps.InfoWindow();\r\n                this.setState(prev => ({ ...prev, map }))\r\n            } catch (e) {\r\n                console.log(\"%c\" + e, \"coloe:red\")\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadMap()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // this.mapEventListener?.remove();\r\n    }\r\n    shouldComponentUpdate(nextProps: Readonly<ReGoMapPropTypes>, nextState: Readonly<ReGoMapContextStateType>, nextContext: any): boolean {\r\n\r\n        return (this.state.map !== nextState.map)\r\n    }\r\n\r\n\r\n\r\n\r\n    updateMarker = (position: LatLng, title: string, map: GoogleMap) => {\r\n        let markers = this.state.markers as Marker[];\r\n\r\n        if (markers.length > 1) {\r\n            this.setMapOnAll(null)\r\n            markers.pop()\r\n            this.setState(prev => ({ ...prev, markers }))\r\n        }\r\n\r\n        var marker = new google.maps.Marker({\r\n            position: position,\r\n            title: title ? title : \"programs Location\"\r\n        });\r\n\r\n        markers.push(marker);\r\n        this.setMapOnAll(map)\r\n        return marker;\r\n    }\r\n\r\n    setMapOnAll = (map: GoogleMap | null) => {\r\n        let markers = this.state.markers as Marker[];\r\n        for (let i = 0; i < markers.length; i++) {\r\n            markers[i].setMap(map);\r\n        }\r\n\r\n        this.setState(prev => ({ ...prev, markers }))\r\n    }\r\n\r\n    hideMarkers = () => {\r\n        this.setMapOnAll(null);\r\n    }\r\n\r\n    mapEventCallback = (latLng: google.maps.LatLng, map: GoogleMap, getSelectedPace: (lat: number, lng: number, name: string) => void, undo?: HTMLDivElement) => {\r\n        if (latLng) {\r\n            // var marker = this.updateMarker(latLng as LatLng, \"Programs location\", map);\r\n\r\n\r\n            if (this.infoWindow !== null) {\r\n                this.infoWindow.close();\r\n            }\r\n            this.infoWindow = new google.maps.InfoWindow();\r\n            this.infoWindow.setContent(\"❌\");\r\n            this.infoWindow.open({\r\n                // anchor: marker,\r\n                map,\r\n                shouldFocus: false,\r\n\r\n            });\r\n\r\n            // undo\r\n            getSelectedPace(latLng.lat(), latLng.lng(), \"\");\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    geoLocateToAPoint = (lat: number, lng: number) => {\r\n        this.setMarkers({ lat, lng });\r\n    }\r\n    setMarkers = ({ lat, lng }: { lat: number, lng: number }) => {\r\n        const map = this.state.map;\r\n        if (map) {\r\n            var myLatlng = new google.maps.LatLng({ lat: lat, lng: lng });\r\n            this.updateMarker(myLatlng, \"My location\", map);\r\n            map.setCenter(myLatlng);\r\n            console.log(map)\r\n        }\r\n    }\r\n\r\n    setPredictions = (placePredictions: AutoCompletePredictions) => {\r\n        this.setState(prev => ({ ...prev, placePredictions }))\r\n    }\r\n\r\n    debounce = (func: () => void, wait: number) => {\r\n\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n        }\r\n        this.timeout = setTimeout(func, wait);\r\n    };\r\n\r\n    displaySuggestions = (predictions: AutoCompletePredictions, status: PlaceServiceStatus) => {\r\n        if (status !== google.maps.places.PlacesServiceStatus.OK || !predictions) { return; }\r\n        this.setPredictions(predictions)\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ReGoMapContext.Provider\r\n                value={{\r\n                    state: this.state,\r\n                    infoWindow: this.infoWindow,\r\n                    geoLocateToAPoint: this.geoLocateToAPoint,\r\n                    // geoLocateOnAutoCompletePlaceClicked: this.geoLocateOnAutoCompletePlaceClicked.bind(this),\r\n                    getDeviceLocation: this.getDeviceLocation.bind(this),\r\n                    mapEventCallback: this.mapEventCallback,\r\n                }}>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </ReGoMapContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nlet MapContextConsumer = ReGoMapContext.Consumer;\r\n\r\nexport {\r\n    MapContextConsumer,\r\n    MapContextProvider,\r\n};\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}