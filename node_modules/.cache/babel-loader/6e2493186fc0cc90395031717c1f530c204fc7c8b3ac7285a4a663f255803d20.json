{"ast":null,"code":"import merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\nfunction objectsHaveSameKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\nfunction styleFunctionSx(props) {\n  const {\n    sx,\n    theme = {}\n  } = props || {};\n  if (!sx) {\n    return null; // emotion & styled-components will neglect null\n  }\n  /*\n   * Receive `sxInput` as object or callback\n   * and then recursively check keys & values to create media query object styles.\n   * (the result will be used in `styled`)\n   */\n\n  function traverse(sxInput) {\n    let sxObject = sxInput;\n    if (typeof sxInput === 'function') {\n      sxObject = sxInput(theme);\n    } else if (typeof sxInput !== 'object') {\n      // value\n      return sxInput;\n    }\n    const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n    const breakpointsKeys = Object.keys(emptyBreakpoints);\n    let css = emptyBreakpoints;\n    Object.keys(sxObject).forEach(styleKey => {\n      const value = callIfFn(sxObject[styleKey], theme);\n      if (value !== null && value !== undefined) {\n        if (typeof value === 'object') {\n          if (propToStyleFunction[styleKey]) {\n            css = merge(css, getThemeValue(styleKey, value, theme));\n          } else {\n            const breakpointsValues = handleBreakpoints({\n              theme\n            }, value, x => ({\n              [styleKey]: x\n            }));\n            if (objectsHaveSameKeys(breakpointsValues, value)) {\n              css[styleKey] = styleFunctionSx({\n                sx: value,\n                theme\n              });\n            } else {\n              css = merge(css, breakpointsValues);\n            }\n          }\n        } else {\n          css = merge(css, getThemeValue(styleKey, value, theme));\n        }\n      }\n    });\n    return removeUnusedBreakpoints(breakpointsKeys, css);\n  }\n  return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);\n}\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;","map":{"version":3,"names":["merge","getThemeValue","propToStyleFunction","handleBreakpoints","createEmptyBreakpointObject","removeUnusedBreakpoints","objectsHaveSameKeys","_len","arguments","length","objects","Array","_key","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","callIfFn","maybeFn","arg","styleFunctionSx","props","sx","theme","traverse","sxInput","sxObject","emptyBreakpoints","breakpoints","breakpointsKeys","css","forEach","styleKey","value","undefined","breakpointsValues","x","isArray","map","filterProps"],"sources":["/home/anonymous/Desktop/UIA/hackathon_TeamSKY-main/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js"],"sourcesContent":["import merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\n\nfunction objectsHaveSameKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\n\nfunction styleFunctionSx(props) {\n  const {\n    sx,\n    theme = {}\n  } = props || {};\n\n  if (!sx) {\n    return null; // emotion & styled-components will neglect null\n  }\n  /*\n   * Receive `sxInput` as object or callback\n   * and then recursively check keys & values to create media query object styles.\n   * (the result will be used in `styled`)\n   */\n\n\n  function traverse(sxInput) {\n    let sxObject = sxInput;\n\n    if (typeof sxInput === 'function') {\n      sxObject = sxInput(theme);\n    } else if (typeof sxInput !== 'object') {\n      // value\n      return sxInput;\n    }\n\n    const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n    const breakpointsKeys = Object.keys(emptyBreakpoints);\n    let css = emptyBreakpoints;\n    Object.keys(sxObject).forEach(styleKey => {\n      const value = callIfFn(sxObject[styleKey], theme);\n\n      if (value !== null && value !== undefined) {\n        if (typeof value === 'object') {\n          if (propToStyleFunction[styleKey]) {\n            css = merge(css, getThemeValue(styleKey, value, theme));\n          } else {\n            const breakpointsValues = handleBreakpoints({\n              theme\n            }, value, x => ({\n              [styleKey]: x\n            }));\n\n            if (objectsHaveSameKeys(breakpointsValues, value)) {\n              css[styleKey] = styleFunctionSx({\n                sx: value,\n                theme\n              });\n            } else {\n              css = merge(css, breakpointsValues);\n            }\n          }\n        } else {\n          css = merge(css, getThemeValue(styleKey, value, theme));\n        }\n      }\n    });\n    return removeUnusedBreakpoints(breakpointsKeys, css);\n  }\n\n  return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);\n}\n\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}